=begin
#fn

#The open source serverless platform.

OpenAPI spec version: 0.2.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require 'spec_helper'
require 'json'

# Unit tests for Fn::RoutesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'RoutesApi' do
  before do
    # run before each test
    @instance = Fn::RoutesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RoutesApi' do
    it 'should create an instance of RoutesApi' do
      expect(@instance).to be_instance_of(Fn::RoutesApi)
    end
  end

  # unit tests for apps_app_routes_get
  # Get route list by app name.
  # This will list routes for a particular app, returned in alphabetical order.
  # @param app Name of app for this set of routes.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :image Route image to match, exact.
  # @option opts [String] :cursor Cursor from previous response.next_cursor to begin results after, if any.
  # @option opts [Integer] :per_page Number of results to return, defaults to 30. Max of 100.
  # @return [RoutesWrapper]
  describe 'apps_app_routes_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apps_app_routes_post
  # Create new Route
  # Create a new route in an app, if app doesn&#39;t exists, it creates the app. Post does not skip validation of zero values.
  # @param app name of the app.
  # @param body One route to post.
  # @param [Hash] opts the optional parameters
  # @return [RouteWrapper]
  describe 'apps_app_routes_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apps_app_routes_route_delete
  # Deletes the route
  # Deletes the route.
  # @param app Name of app for this set of routes.
  # @param route Route name
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'apps_app_routes_route_delete test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apps_app_routes_route_get
  # Gets route by name
  # Gets a route by name.
  # @param app Name of app for this set of routes.
  # @param route Route name
  # @param [Hash] opts the optional parameters
  # @return [RouteWrapper]
  describe 'apps_app_routes_route_get test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apps_app_routes_route_patch
  # Update a Route, Fails if the route or app does not exist. Accepts partial updates / skips validation of zero values.
  # Update a route
  # @param app name of the app.
  # @param route route path.
  # @param body One route to post.
  # @param [Hash] opts the optional parameters
  # @return [RouteWrapper]
  describe 'apps_app_routes_route_patch test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for apps_app_routes_route_put
  # Create a Route if it does not exist. Update if it does. Will also create app if it does not exist. Put does not skip validation of zero values
  # Update or Create a route
  # @param app name of the app.
  # @param route route path.
  # @param body One route to post.
  # @param [Hash] opts the optional parameters
  # @return [RouteWrapper]
  describe 'apps_app_routes_route_put test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
